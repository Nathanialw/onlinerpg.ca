'use strict';

import { Update } from './receive.js';

// Function to fetch the session ID from the PHP script
async function getSessionId() {
    try {
      const response = await fetch('session.php');
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      sessionId = await response.text();
      return sessionId;
    } catch (error) {
      console.error('There was a problem with the fetch operation:', error);
    }
  }
  
  // Save the session ID as a JavaScript variable
  getSessionId().then(sessionId => {
    if (sessionId) {
      console.log('success Session ID:', sessionId);
      // Now you can use the sessionId variable in your code
    }
  });


// Generate or retrieve the unique identifier (e.g., session ID)
let sessionId; // This should be generated by your server
// Create a WebSocket connection and include the session ID as a query parameter
// let websocket = new WebSocket(`wss://onlinerpg.ca:9002/ws?session_id=${sessionId}`);
let websocket;
// let websocket = new WebSocket('wss://onlinerpg.ca/ws:9002?session_id=${sessionId}');
let reconnectInterval = 10000; // 1 second

export async function createWebSocket() {
    sessionId = await getSessionId();
    if (!sessionId) {
        console.error('Failed to retrieve session ID');
        return;
    }

    websocket = new WebSocket(`wss://www.onlinerpg.ca/ws?session_id=${sessionId}`);

    websocket.onopen = () => {
        console.log("WebSocket connection opened");
        // onMessage listener
        websocket.onmessage = (event) => {
            console.log("WebSocket message received:", event.data);
            // Handle incoming messages here
            websocket.onmessage = function(event) {    
                console.log("raw received: ", event.data)
                
                if (event.data === 0) {
                    return
                }
            
                let type = event.data[0];
                let data = event.data.substring(1);
                console.log("type: ", type, "payload: ", data)
                // if empty string
                if (data.length == 0) {
                    console.log("received empty string")
                    return
                }
                
                //need to use a hash map
                Update[type](data);
                
                
                //populate map on startup
                //on periodic update
                //update positions
                //update damage
                //get new chunk to emplace in map array
            };
        };
    };

    websocket.onclose = () => {
        console.log("WebSocket connection closed, attempting to reconnect...");
        setTimeout(() => {
            createWebSocket();
        }, reconnectInterval);
    };

    websocket.onerror = (error) => {
        console.error("WebSocket error:", error);
        websocket.close();        
    };

    // websocket.onmessage = (event) => {
    //     console.log("WebSocket message received:", event.data);
    //     // Handle incoming messages here
    // };

    setInterval(() => {
        if (websocket.readyState === WebSocket.OPEN) {
            websocket.send(JSON.stringify({ event: "ping" }));
        }
    }, 2500);
}

export function socket() {
    if (websocket && websocket.readyState === WebSocket.OPEN) {
        return { websocket: websocket, isConnected: true };
    } else if (websocket && websocket.readyState === WebSocket.CONNECTING) {
        console.log("Connecting WebSocket...");
        return { websocket: websocket, isConnected: false };
    } else if (websocket && (websocket.readyState === WebSocket.CLOSING || websocket.readyState === WebSocket.CLOSED)) {
        console.log("Reconnecting WebSocket...");
        createWebSocket();
        return { websocket: websocket, isConnected: false };
    } else {
        createWebSocket();
        console.log("Reconnecting WebSocket...");
        return { websocket: websocket, isConnected: false };
    }
}

function closeWebSocket() {
    if (websocket) {
        websocket.close();
    }
}

export function Send_Web_Socket_Message(message) {
    if (socket().isConnected) {
        socket().websocket.send(message);       
    }
}

'use strict';


// Generate or retrieve the unique identifier (e.g., session ID)
const sessionId = "unique-session-id"; // This should be generated by your server
// Create a WebSocket connection and include the session ID as a query parameter
// const websocket = new WebSocket(`ws://yourserver.com:9002?session_id=${sessionId}`);
let websocket = new WebSocket("wss://www.onlinerpg.ca/ws");
let reconnectInterval = 1000; // 1 second

export function createWebSocket() {
    websocket.onopen = () => {
        console.log("WebSocket connection opened");
    };

    websocket.onclose = () => {
        console.log("WebSocket connection closed, attempting to reconnect...");
        setTimeout(() => {
            createWebSocket();
        }, reconnectInterval);
    };

    websocket.onerror = (error) => {
        console.error("WebSocket error:", error);
        websocket.close();        
    };

    // websocket.onmessage = (event) => {
    //     console.log("WebSocket message received:", event.data);
    //     // Handle incoming messages here
    // };

    setInterval(() => {
        if (websocket.readyState === WebSocket.OPEN) {
            websocket.send(JSON.stringify({ event: "ping" }));
        }
    }, 2500);
}

export function socket() {
    if (websocket && websocket.readyState === WebSocket.OPEN) {
        return { websocket: websocket, isConnected: true };
    } else if (websocket && websocket.readyState === WebSocket.CONNECTING) {
        console.log("Connecting WebSocket...");
        return { websocket: websocket, isConnected: false };
    } else if (websocket && (websocket.readyState === WebSocket.CLOSING || websocket.readyState === WebSocket.CLOSED)) {
        console.log("Reconnecting WebSocket...");
        createWebSocket();
        return { websocket: websocket, isConnected: false };
    } else {
        createWebSocket();
        console.log("Reconnecting WebSocket...");
        return { websocket: websocket, isConnected: false };
    }
}

export function closeWebSocket() {
    if (websocket) {
        websocket.close();
    }
}

export function Send_Web_Socket_Message(message) {
    if (socket().isConnected) {
        socket().websocket.send(message);       
    }
}
